// Code generated by MockGen. DO NOT EDIT.
// Source: ./connection.go

// Package nntpcli is a generated GoMock package.
package nntpcli

import (
	io "io"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockConnection is a mock of Connection interface.
type MockConnection struct {
	ctrl     *gomock.Controller
	recorder *MockConnectionMockRecorder
}

// MockConnectionMockRecorder is the mock recorder for MockConnection.
type MockConnectionMockRecorder struct {
	mock *MockConnection
}

// NewMockConnection creates a new mock instance.
func NewMockConnection(ctrl *gomock.Controller) *MockConnection {
	mock := &MockConnection{ctrl: ctrl}
	mock.recorder = &MockConnectionMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockConnection) EXPECT() *MockConnectionMockRecorder {
	return m.recorder
}

// Authenticate mocks base method.
func (m *MockConnection) Authenticate() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Authenticate")
	ret0, _ := ret[0].(error)
	return ret0
}

// Authenticate indicates an expected call of Authenticate.
func (mr *MockConnectionMockRecorder) Authenticate() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Authenticate", reflect.TypeOf((*MockConnection)(nil).Authenticate))
}

// Body mocks base method.
func (m *MockConnection) Body(msgId string, chunk []byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Body", msgId, chunk)
	ret0, _ := ret[0].(error)
	return ret0
}

// Body indicates an expected call of Body.
func (mr *MockConnectionMockRecorder) Body(msgId, chunk interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Body", reflect.TypeOf((*MockConnection)(nil).Body), msgId, chunk)
}

// Close mocks base method.
func (m *MockConnection) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockConnectionMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockConnection)(nil).Close))
}

// CurrentJoinedGroup mocks base method.
func (m *MockConnection) CurrentJoinedGroup() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CurrentJoinedGroup")
	ret0, _ := ret[0].(string)
	return ret0
}

// CurrentJoinedGroup indicates an expected call of CurrentJoinedGroup.
func (mr *MockConnectionMockRecorder) CurrentJoinedGroup() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CurrentJoinedGroup", reflect.TypeOf((*MockConnection)(nil).CurrentJoinedGroup))
}

// JoinGroup mocks base method.
func (m *MockConnection) JoinGroup(name string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "JoinGroup", name)
	ret0, _ := ret[0].(error)
	return ret0
}

// JoinGroup indicates an expected call of JoinGroup.
func (mr *MockConnectionMockRecorder) JoinGroup(name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "JoinGroup", reflect.TypeOf((*MockConnection)(nil).JoinGroup), name)
}

// Post mocks base method.
func (m *MockConnection) Post(r io.Reader) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Post", r)
	ret0, _ := ret[0].(error)
	return ret0
}

// Post indicates an expected call of Post.
func (mr *MockConnectionMockRecorder) Post(r interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Post", reflect.TypeOf((*MockConnection)(nil).Post), r)
}

// Provider mocks base method.
func (m *MockConnection) Provider() Provider {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Provider")
	ret0, _ := ret[0].(Provider)
	return ret0
}

// Provider indicates an expected call of Provider.
func (mr *MockConnectionMockRecorder) Provider() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Provider", reflect.TypeOf((*MockConnection)(nil).Provider))
}
