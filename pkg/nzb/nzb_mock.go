// Code generated by MockGen. DO NOT EDIT.
// Source: ./nzb.go

// Package nzb is a generated GoMock package.
package nzb

import (
	io "io"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockNzbParser is a mock of NzbParser interface.
type MockNzbParser struct {
	ctrl     *gomock.Controller
	recorder *MockNzbParserMockRecorder
}

// MockNzbParserMockRecorder is the mock recorder for MockNzbParser.
type MockNzbParserMockRecorder struct {
	mock *MockNzbParser
}

// NewMockNzbParser creates a new mock instance.
func NewMockNzbParser(ctrl *gomock.Controller) *MockNzbParser {
	mock := &MockNzbParser{ctrl: ctrl}
	mock.recorder = &MockNzbParserMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockNzbParser) EXPECT() *MockNzbParserMockRecorder {
	return m.recorder
}

// Parse mocks base method.
func (m *MockNzbParser) Parse(buf io.Reader) (*Nzb, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Parse", buf)
	ret0, _ := ret[0].(*Nzb)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Parse indicates an expected call of Parse.
func (mr *MockNzbParserMockRecorder) Parse(buf interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Parse", reflect.TypeOf((*MockNzbParser)(nil).Parse), buf)
}

// ParseFromString mocks base method.
func (m *MockNzbParser) ParseFromString(data string) (*Nzb, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ParseFromString", data)
	ret0, _ := ret[0].(*Nzb)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ParseFromString indicates an expected call of ParseFromString.
func (mr *MockNzbParserMockRecorder) ParseFromString(data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ParseFromString", reflect.TypeOf((*MockNzbParser)(nil).ParseFromString), data)
}
