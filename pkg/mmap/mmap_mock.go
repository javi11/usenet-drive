// Code generated by MockGen. DO NOT EDIT.
// Source: ./mmap.go

// Package mmap is a generated GoMock package.
package mmap

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	osfs "github.com/javi11/usenet-drive/pkg/osfs"
)

// MockMmapFileData is a mock of MmapFileData interface.
type MockMmapFileData struct {
	ctrl     *gomock.Controller
	recorder *MockMmapFileDataMockRecorder
}

// MockMmapFileDataMockRecorder is the mock recorder for MockMmapFileData.
type MockMmapFileDataMockRecorder struct {
	mock *MockMmapFileData
}

// NewMockMmapFileData creates a new mock instance.
func NewMockMmapFileData(ctrl *gomock.Controller) *MockMmapFileData {
	mock := &MockMmapFileData{ctrl: ctrl}
	mock.recorder = &MockMmapFileDataMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMmapFileData) EXPECT() *MockMmapFileDataMockRecorder {
	return m.recorder
}

// Bytes mocks base method.
func (m *MockMmapFileData) Bytes() []byte {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Bytes")
	ret0, _ := ret[0].([]byte)
	return ret0
}

// Bytes indicates an expected call of Bytes.
func (mr *MockMmapFileDataMockRecorder) Bytes() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Bytes", reflect.TypeOf((*MockMmapFileData)(nil).Bytes))
}

// Close mocks base method.
func (m *MockMmapFileData) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockMmapFileDataMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockMmapFileData)(nil).Close))
}

// File mocks base method.
func (m *MockMmapFileData) File() osfs.File {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "File")
	ret0, _ := ret[0].(osfs.File)
	return ret0
}

// File indicates an expected call of File.
func (mr *MockMmapFileDataMockRecorder) File() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "File", reflect.TypeOf((*MockMmapFileData)(nil).File))
}
