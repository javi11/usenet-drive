// Code generated by MockGen. DO NOT EDIT.
// Source: ./status.go

// Package status is a generated GoMock package.
package status

import (
	context "context"
	reflect "reflect"
	time "time"

	gomock "github.com/golang/mock/gomock"
	uuid "github.com/google/uuid"
)

// MockStatusReporter is a mock of StatusReporter interface.
type MockStatusReporter struct {
	ctrl     *gomock.Controller
	recorder *MockStatusReporterMockRecorder
}

// MockStatusReporterMockRecorder is the mock recorder for MockStatusReporter.
type MockStatusReporterMockRecorder struct {
	mock *MockStatusReporter
}

// NewMockStatusReporter creates a new mock instance.
func NewMockStatusReporter(ctrl *gomock.Controller) *MockStatusReporter {
	mock := &MockStatusReporter{ctrl: ctrl}
	mock.recorder = &MockStatusReporterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStatusReporter) EXPECT() *MockStatusReporterMockRecorder {
	return m.recorder
}

// AddTimeData mocks base method.
func (m *MockStatusReporter) AddTimeData(id uuid.UUID, data *TimeData) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AddTimeData", id, data)
}

// AddTimeData indicates an expected call of AddTimeData.
func (mr *MockStatusReporterMockRecorder) AddTimeData(id, data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddTimeData", reflect.TypeOf((*MockStatusReporter)(nil).AddTimeData), id, data)
}

// FinishDownload mocks base method.
func (m *MockStatusReporter) FinishDownload(id uuid.UUID) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "FinishDownload", id)
}

// FinishDownload indicates an expected call of FinishDownload.
func (mr *MockStatusReporterMockRecorder) FinishDownload(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FinishDownload", reflect.TypeOf((*MockStatusReporter)(nil).FinishDownload), id)
}

// FinishUpload mocks base method.
func (m *MockStatusReporter) FinishUpload(id uuid.UUID) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "FinishUpload", id)
}

// FinishUpload indicates an expected call of FinishUpload.
func (mr *MockStatusReporterMockRecorder) FinishUpload(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FinishUpload", reflect.TypeOf((*MockStatusReporter)(nil).FinishUpload), id)
}

// GetStatus mocks base method.
func (m *MockStatusReporter) GetStatus() map[uuid.UUID]*status {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStatus")
	ret0, _ := ret[0].(map[uuid.UUID]*status)
	return ret0
}

// GetStatus indicates an expected call of GetStatus.
func (mr *MockStatusReporterMockRecorder) GetStatus() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStatus", reflect.TypeOf((*MockStatusReporter)(nil).GetStatus))
}

// Start mocks base method.
func (m *MockStatusReporter) Start(ctx context.Context, ticker *time.Ticker) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Start", ctx, ticker)
}

// Start indicates an expected call of Start.
func (mr *MockStatusReporterMockRecorder) Start(ctx, ticker interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Start", reflect.TypeOf((*MockStatusReporter)(nil).Start), ctx, ticker)
}

// StartDownload mocks base method.
func (m *MockStatusReporter) StartDownload(id uuid.UUID, path string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "StartDownload", id, path)
}

// StartDownload indicates an expected call of StartDownload.
func (mr *MockStatusReporterMockRecorder) StartDownload(id, path interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartDownload", reflect.TypeOf((*MockStatusReporter)(nil).StartDownload), id, path)
}

// StartUpload mocks base method.
func (m *MockStatusReporter) StartUpload(id uuid.UUID, path string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "StartUpload", id, path)
}

// StartUpload indicates an expected call of StartUpload.
func (mr *MockStatusReporterMockRecorder) StartUpload(id, path interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartUpload", reflect.TypeOf((*MockStatusReporter)(nil).StartUpload), id, path)
}
