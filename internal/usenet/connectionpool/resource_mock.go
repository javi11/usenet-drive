// Code generated by MockGen. DO NOT EDIT.
// Source: ./resource.go

// Package connectionpool is a generated GoMock package.
package connectionpool

import (
	reflect "reflect"
	time "time"

	gomock "github.com/golang/mock/gomock"
	nntpcli "github.com/javi11/usenet-drive/pkg/nntpcli"
)

// MockResource is a mock of Resource interface.
type MockResource struct {
	ctrl     *gomock.Controller
	recorder *MockResourceMockRecorder
}

// MockResourceMockRecorder is the mock recorder for MockResource.
type MockResourceMockRecorder struct {
	mock *MockResource
}

// NewMockResource creates a new mock instance.
func NewMockResource(ctrl *gomock.Controller) *MockResource {
	mock := &MockResource{ctrl: ctrl}
	mock.recorder = &MockResourceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockResource) EXPECT() *MockResourceMockRecorder {
	return m.recorder
}

// CreationTime mocks base method.
func (m *MockResource) CreationTime() time.Time {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreationTime")
	ret0, _ := ret[0].(time.Time)
	return ret0
}

// CreationTime indicates an expected call of CreationTime.
func (mr *MockResourceMockRecorder) CreationTime() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreationTime", reflect.TypeOf((*MockResource)(nil).CreationTime))
}

// Destroy mocks base method.
func (m *MockResource) Destroy() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Destroy")
}

// Destroy indicates an expected call of Destroy.
func (mr *MockResourceMockRecorder) Destroy() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Destroy", reflect.TypeOf((*MockResource)(nil).Destroy))
}

// Hijack mocks base method.
func (m *MockResource) Hijack() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Hijack")
}

// Hijack indicates an expected call of Hijack.
func (mr *MockResourceMockRecorder) Hijack() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Hijack", reflect.TypeOf((*MockResource)(nil).Hijack))
}

// IdleDuration mocks base method.
func (m *MockResource) IdleDuration() time.Duration {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IdleDuration")
	ret0, _ := ret[0].(time.Duration)
	return ret0
}

// IdleDuration indicates an expected call of IdleDuration.
func (mr *MockResourceMockRecorder) IdleDuration() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IdleDuration", reflect.TypeOf((*MockResource)(nil).IdleDuration))
}

// LastUsedNanotime mocks base method.
func (m *MockResource) LastUsedNanotime() int64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LastUsedNanotime")
	ret0, _ := ret[0].(int64)
	return ret0
}

// LastUsedNanotime indicates an expected call of LastUsedNanotime.
func (mr *MockResourceMockRecorder) LastUsedNanotime() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LastUsedNanotime", reflect.TypeOf((*MockResource)(nil).LastUsedNanotime))
}

// Release mocks base method.
func (m *MockResource) Release() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Release")
}

// Release indicates an expected call of Release.
func (mr *MockResourceMockRecorder) Release() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Release", reflect.TypeOf((*MockResource)(nil).Release))
}

// ReleaseUnused mocks base method.
func (m *MockResource) ReleaseUnused() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ReleaseUnused")
}

// ReleaseUnused indicates an expected call of ReleaseUnused.
func (mr *MockResourceMockRecorder) ReleaseUnused() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReleaseUnused", reflect.TypeOf((*MockResource)(nil).ReleaseUnused))
}

// Value mocks base method.
func (m *MockResource) Value() nntpcli.Connection {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Value")
	ret0, _ := ret[0].(nntpcli.Connection)
	return ret0
}

// Value indicates an expected call of Value.
func (mr *MockResourceMockRecorder) Value() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Value", reflect.TypeOf((*MockResource)(nil).Value))
}
