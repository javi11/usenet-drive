// Code generated by MockGen. DO NOT EDIT.
// Source: ./connectionpool.go

// Package connectionpool is a generated GoMock package.
package connectionpool

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockUsenetConnectionPool is a mock of UsenetConnectionPool interface.
type MockUsenetConnectionPool struct {
	ctrl     *gomock.Controller
	recorder *MockUsenetConnectionPoolMockRecorder
}

// MockUsenetConnectionPoolMockRecorder is the mock recorder for MockUsenetConnectionPool.
type MockUsenetConnectionPoolMockRecorder struct {
	mock *MockUsenetConnectionPool
}

// NewMockUsenetConnectionPool creates a new mock instance.
func NewMockUsenetConnectionPool(ctrl *gomock.Controller) *MockUsenetConnectionPool {
	mock := &MockUsenetConnectionPool{ctrl: ctrl}
	mock.recorder = &MockUsenetConnectionPoolMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUsenetConnectionPool) EXPECT() *MockUsenetConnectionPoolMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockUsenetConnectionPool) Close(res Resource) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Close", res)
}

// Close indicates an expected call of Close.
func (mr *MockUsenetConnectionPoolMockRecorder) Close(res interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockUsenetConnectionPool)(nil).Close), res)
}

// Free mocks base method.
func (m *MockUsenetConnectionPool) Free(res Resource) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Free", res)
}

// Free indicates an expected call of Free.
func (mr *MockUsenetConnectionPoolMockRecorder) Free(res interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Free", reflect.TypeOf((*MockUsenetConnectionPool)(nil).Free), res)
}

// GetDownloadConnection mocks base method.
func (m *MockUsenetConnectionPool) GetDownloadConnection(ctx context.Context) (Resource, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDownloadConnection", ctx)
	ret0, _ := ret[0].(Resource)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDownloadConnection indicates an expected call of GetDownloadConnection.
func (mr *MockUsenetConnectionPoolMockRecorder) GetDownloadConnection(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDownloadConnection", reflect.TypeOf((*MockUsenetConnectionPool)(nil).GetDownloadConnection), ctx)
}

// GetProvidersInfo mocks base method.
func (m *MockUsenetConnectionPool) GetProvidersInfo() []ProviderInfo {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProvidersInfo")
	ret0, _ := ret[0].([]ProviderInfo)
	return ret0
}

// GetProvidersInfo indicates an expected call of GetProvidersInfo.
func (mr *MockUsenetConnectionPoolMockRecorder) GetProvidersInfo() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProvidersInfo", reflect.TypeOf((*MockUsenetConnectionPool)(nil).GetProvidersInfo))
}

// GetUploadConnection mocks base method.
func (m *MockUsenetConnectionPool) GetUploadConnection(ctx context.Context) (Resource, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUploadConnection", ctx)
	ret0, _ := ret[0].(Resource)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUploadConnection indicates an expected call of GetUploadConnection.
func (mr *MockUsenetConnectionPoolMockRecorder) GetUploadConnection(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUploadConnection", reflect.TypeOf((*MockUsenetConnectionPool)(nil).GetUploadConnection), ctx)
}

// Quit mocks base method.
func (m *MockUsenetConnectionPool) Quit() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Quit")
}

// Quit indicates an expected call of Quit.
func (mr *MockUsenetConnectionPoolMockRecorder) Quit() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Quit", reflect.TypeOf((*MockUsenetConnectionPool)(nil).Quit))
}
