// Code generated by MockGen. DO NOT EDIT.
// Source: ./connectionpool.go

// Package connectionpool is a generated GoMock package.
package connectionpool

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	nntpcli "github.com/javi11/usenet-drive/pkg/nntpcli"
)

// MockUsenetConnectionPool is a mock of UsenetConnectionPool interface.
type MockUsenetConnectionPool struct {
	ctrl     *gomock.Controller
	recorder *MockUsenetConnectionPoolMockRecorder
}

// MockUsenetConnectionPoolMockRecorder is the mock recorder for MockUsenetConnectionPool.
type MockUsenetConnectionPoolMockRecorder struct {
	mock *MockUsenetConnectionPool
}

// NewMockUsenetConnectionPool creates a new mock instance.
func NewMockUsenetConnectionPool(ctrl *gomock.Controller) *MockUsenetConnectionPool {
	mock := &MockUsenetConnectionPool{ctrl: ctrl}
	mock.recorder = &MockUsenetConnectionPoolMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUsenetConnectionPool) EXPECT() *MockUsenetConnectionPoolMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockUsenetConnectionPool) Close(c nntpcli.Connection) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close", c)
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockUsenetConnectionPoolMockRecorder) Close(c interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockUsenetConnectionPool)(nil).Close), c)
}

// Free mocks base method.
func (m *MockUsenetConnectionPool) Free(c nntpcli.Connection) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Free", c)
	ret0, _ := ret[0].(error)
	return ret0
}

// Free indicates an expected call of Free.
func (mr *MockUsenetConnectionPoolMockRecorder) Free(c interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Free", reflect.TypeOf((*MockUsenetConnectionPool)(nil).Free), c)
}

// GetDownloadConnection mocks base method.
func (m *MockUsenetConnectionPool) GetDownloadConnection() (nntpcli.Connection, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDownloadConnection")
	ret0, _ := ret[0].(nntpcli.Connection)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDownloadConnection indicates an expected call of GetDownloadConnection.
func (mr *MockUsenetConnectionPoolMockRecorder) GetDownloadConnection() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDownloadConnection", reflect.TypeOf((*MockUsenetConnectionPool)(nil).GetDownloadConnection))
}

// GetDownloadOnlyFreeConnections mocks base method.
func (m *MockUsenetConnectionPool) GetDownloadOnlyFreeConnections() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDownloadOnlyFreeConnections")
	ret0, _ := ret[0].(int)
	return ret0
}

// GetDownloadOnlyFreeConnections indicates an expected call of GetDownloadOnlyFreeConnections.
func (mr *MockUsenetConnectionPoolMockRecorder) GetDownloadOnlyFreeConnections() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDownloadOnlyFreeConnections", reflect.TypeOf((*MockUsenetConnectionPool)(nil).GetDownloadOnlyFreeConnections))
}

// GetFreeConnections mocks base method.
func (m *MockUsenetConnectionPool) GetFreeConnections() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFreeConnections")
	ret0, _ := ret[0].(int)
	return ret0
}

// GetFreeConnections indicates an expected call of GetFreeConnections.
func (mr *MockUsenetConnectionPoolMockRecorder) GetFreeConnections() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFreeConnections", reflect.TypeOf((*MockUsenetConnectionPool)(nil).GetFreeConnections))
}

// GetMaxConnections mocks base method.
func (m *MockUsenetConnectionPool) GetMaxConnections() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMaxConnections")
	ret0, _ := ret[0].(int)
	return ret0
}

// GetMaxConnections indicates an expected call of GetMaxConnections.
func (mr *MockUsenetConnectionPoolMockRecorder) GetMaxConnections() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMaxConnections", reflect.TypeOf((*MockUsenetConnectionPool)(nil).GetMaxConnections))
}

// GetMaxDownloadOnlyConnections mocks base method.
func (m *MockUsenetConnectionPool) GetMaxDownloadOnlyConnections() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMaxDownloadOnlyConnections")
	ret0, _ := ret[0].(int)
	return ret0
}

// GetMaxDownloadOnlyConnections indicates an expected call of GetMaxDownloadOnlyConnections.
func (mr *MockUsenetConnectionPoolMockRecorder) GetMaxDownloadOnlyConnections() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMaxDownloadOnlyConnections", reflect.TypeOf((*MockUsenetConnectionPool)(nil).GetMaxDownloadOnlyConnections))
}

// GetUploadConnection mocks base method.
func (m *MockUsenetConnectionPool) GetUploadConnection() (nntpcli.Connection, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUploadConnection")
	ret0, _ := ret[0].(nntpcli.Connection)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUploadConnection indicates an expected call of GetUploadConnection.
func (mr *MockUsenetConnectionPoolMockRecorder) GetUploadConnection() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUploadConnection", reflect.TypeOf((*MockUsenetConnectionPool)(nil).GetUploadConnection))
}
