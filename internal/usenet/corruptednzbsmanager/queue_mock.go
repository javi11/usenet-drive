// Code generated by MockGen. DO NOT EDIT.
// Source: ./queue.go

// Package corruptednzbsmanager is a generated GoMock package.
package corruptednzbsmanager

import (
	context "context"
	io "io"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockCorruptedNzbsManager is a mock of CorruptedNzbsManager interface.
type MockCorruptedNzbsManager struct {
	ctrl     *gomock.Controller
	recorder *MockCorruptedNzbsManagerMockRecorder
}

// MockCorruptedNzbsManagerMockRecorder is the mock recorder for MockCorruptedNzbsManager.
type MockCorruptedNzbsManagerMockRecorder struct {
	mock *MockCorruptedNzbsManager
}

// NewMockCorruptedNzbsManager creates a new mock instance.
func NewMockCorruptedNzbsManager(ctrl *gomock.Controller) *MockCorruptedNzbsManager {
	mock := &MockCorruptedNzbsManager{ctrl: ctrl}
	mock.recorder = &MockCorruptedNzbsManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCorruptedNzbsManager) EXPECT() *MockCorruptedNzbsManagerMockRecorder {
	return m.recorder
}

// Add mocks base method.
func (m *MockCorruptedNzbsManager) Add(ctx context.Context, path, errorMessage string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Add", ctx, path, errorMessage)
	ret0, _ := ret[0].(error)
	return ret0
}

// Add indicates an expected call of Add.
func (mr *MockCorruptedNzbsManagerMockRecorder) Add(ctx, path, errorMessage interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Add", reflect.TypeOf((*MockCorruptedNzbsManager)(nil).Add), ctx, path, errorMessage)
}

// Delete mocks base method.
func (m *MockCorruptedNzbsManager) Delete(ctx context.Context, id int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockCorruptedNzbsManagerMockRecorder) Delete(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockCorruptedNzbsManager)(nil).Delete), ctx, id)
}

// Discard mocks base method.
func (m *MockCorruptedNzbsManager) Discard(ctx context.Context, id int) (*cNzb, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Discard", ctx, id)
	ret0, _ := ret[0].(*cNzb)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Discard indicates an expected call of Discard.
func (mr *MockCorruptedNzbsManagerMockRecorder) Discard(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Discard", reflect.TypeOf((*MockCorruptedNzbsManager)(nil).Discard), ctx, id)
}

// DiscardByPath mocks base method.
func (m *MockCorruptedNzbsManager) DiscardByPath(ctx context.Context, path string) (*cNzb, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DiscardByPath", ctx, path)
	ret0, _ := ret[0].(*cNzb)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DiscardByPath indicates an expected call of DiscardByPath.
func (mr *MockCorruptedNzbsManagerMockRecorder) DiscardByPath(ctx, path interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DiscardByPath", reflect.TypeOf((*MockCorruptedNzbsManager)(nil).DiscardByPath), ctx, path)
}

// GetFileContent mocks base method.
func (m *MockCorruptedNzbsManager) GetFileContent(ctx context.Context, id int) (io.ReadCloser, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFileContent", ctx, id)
	ret0, _ := ret[0].(io.ReadCloser)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFileContent indicates an expected call of GetFileContent.
func (mr *MockCorruptedNzbsManagerMockRecorder) GetFileContent(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFileContent", reflect.TypeOf((*MockCorruptedNzbsManager)(nil).GetFileContent), ctx, id)
}

// List mocks base method.
func (m *MockCorruptedNzbsManager) List(ctx context.Context, limit, offset int, filters *Filters, sortBy *SortBy) (Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", ctx, limit, offset, filters, sortBy)
	ret0, _ := ret[0].(Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockCorruptedNzbsManagerMockRecorder) List(ctx, limit, offset, filters, sortBy interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockCorruptedNzbsManager)(nil).List), ctx, limit, offset, filters, sortBy)
}

// Update mocks base method.
func (m *MockCorruptedNzbsManager) Update(ctx context.Context, oldPath, newPath string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, oldPath, newPath)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockCorruptedNzbsManagerMockRecorder) Update(ctx, oldPath, newPath interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockCorruptedNzbsManager)(nil).Update), ctx, oldPath, newPath)
}
