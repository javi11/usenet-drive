// Code generated by MockGen. DO NOT EDIT.
// Source: ./chunkcache.go

// Package filereader is a generated GoMock package.
package filereader

import (
	reflect "reflect"
	sync "sync"

	gomock "github.com/golang/mock/gomock"
)

// MockChunkCache is a mock of ChunkCache interface.
type MockChunkCache struct {
	ctrl     *gomock.Controller
	recorder *MockChunkCacheMockRecorder
}

// MockChunkCacheMockRecorder is the mock recorder for MockChunkCache.
type MockChunkCacheMockRecorder struct {
	mock *MockChunkCache
}

// NewMockChunkCache creates a new mock instance.
func NewMockChunkCache(ctrl *gomock.Controller) *MockChunkCache {
	mock := &MockChunkCache{ctrl: ctrl}
	mock.recorder = &MockChunkCacheMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockChunkCache) EXPECT() *MockChunkCacheMockRecorder {
	return m.recorder
}

// Delete mocks base method.
func (m *MockChunkCache) Delete(segmentIndex any) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Delete", segmentIndex)
}

// Delete indicates an expected call of Delete.
func (mr *MockChunkCacheMockRecorder) Delete(segmentIndex interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockChunkCache)(nil).Delete), segmentIndex)
}

// DeleteAfter mocks base method.
func (m *MockChunkCache) DeleteAfter(segmentIndex int, chunkPool *sync.Pool) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "DeleteAfter", segmentIndex, chunkPool)
}

// DeleteAfter indicates an expected call of DeleteAfter.
func (mr *MockChunkCacheMockRecorder) DeleteAfter(segmentIndex, chunkPool interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAfter", reflect.TypeOf((*MockChunkCache)(nil).DeleteAfter), segmentIndex, chunkPool)
}

// DeleteAll mocks base method.
func (m *MockChunkCache) DeleteAll(chunkPool *sync.Pool) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "DeleteAll", chunkPool)
}

// DeleteAll indicates an expected call of DeleteAll.
func (mr *MockChunkCacheMockRecorder) DeleteAll(chunkPool interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAll", reflect.TypeOf((*MockChunkCache)(nil).DeleteAll), chunkPool)
}

// DeleteBefore mocks base method.
func (m *MockChunkCache) DeleteBefore(segmentIndex int, chunkPool *sync.Pool) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "DeleteBefore", segmentIndex, chunkPool)
}

// DeleteBefore indicates an expected call of DeleteBefore.
func (mr *MockChunkCacheMockRecorder) DeleteBefore(segmentIndex, chunkPool interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteBefore", reflect.TypeOf((*MockChunkCache)(nil).DeleteBefore), segmentIndex, chunkPool)
}

// Get mocks base method.
func (m *MockChunkCache) Get(segmentIndex int) *downloadManager {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", segmentIndex)
	ret0, _ := ret[0].(*downloadManager)
	return ret0
}

// Get indicates an expected call of Get.
func (mr *MockChunkCacheMockRecorder) Get(segmentIndex interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockChunkCache)(nil).Get), segmentIndex)
}

// Len mocks base method.
func (m *MockChunkCache) Len() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Len")
	ret0, _ := ret[0].(int)
	return ret0
}

// Len indicates an expected call of Len.
func (mr *MockChunkCacheMockRecorder) Len() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Len", reflect.TypeOf((*MockChunkCache)(nil).Len))
}

// LoadOrStore mocks base method.
func (m *MockChunkCache) LoadOrStore(key, value any) (any, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LoadOrStore", key, value)
	ret0, _ := ret[0].(any)
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// LoadOrStore indicates an expected call of LoadOrStore.
func (mr *MockChunkCacheMockRecorder) LoadOrStore(key, value interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoadOrStore", reflect.TypeOf((*MockChunkCache)(nil).LoadOrStore), key, value)
}
